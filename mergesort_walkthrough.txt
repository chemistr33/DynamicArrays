───────────────────────────────────────────────────────────────────────────────
There's two ways to do a mergesort as far as I can tell.
───────────────────────────────────────────────────────────────────────────────

Inclusive left & right:
┌──────────────────────
‖ if (right <= left)
‖     return;
‖ size_t mid = left + (right - left) / 2;
‖ mergesort (vec, left, mid, comp);
‖ mergesort (vec, mid+1, right, comp);

Exclusive-Right:
┌──────────────────────
‖ if ☆ (right - left <= 1) ☆
‖     return;
‖ size_t mid = left + (right - left) / 2;
‖ mergesort (vec, left, mid, comp);
‖ mergesort (vec, ☆ mid ☆, right, comp);

The main advantage I found of using the exclusive-right variant is that neither
myself or the user has to pass in a right/end index, they only have to pass
in a size.

Note: 
In this Vector implementation, .size refers to the number of elements present,
while .capacity refers to the maximum number of elements that can be stored w/o
resizing.

───────────────────────────────────────────────────────────────────────────────
Walkthrough of the exclusive-right variant of the mergesort algorithm:
───────────────────────────────────────────────────────────────────────────────

Let's say you have a vector: 

    vec=[6,7,1,0,0,2,4]

and you call: 
    
    mergesort(&vec,0,vec.size,comp);

Pseudocode Notes:
─────────────────
 ⑆ vec.size = 7, valid indices 0-6
    
 ⑆ "L(..)" means left-recursion, mergesort(&vec,left,mid,...)
     when in left-recursion, left is inclusive and mid is exclusive
    
 ⑆ "R(..)" means right-recursion, mergesort(&vec,mid,right,...)
     when in right-recursion, mid is inclusive and right is exclusive
       
 ⑆ The elements are depicted in the first parameter of mergesort() and
   merge() for the sake of clarity. Comparison callback is omitted from the
   mergesort() calls. 
 
 ⑆ void mergesort (Vector *vec, size_t left, size_t right, compare_fptr comp)   
 
 ⑆ void merge(Vector *vec, size_t left, size_t mid, size_t right,
              compare_fptr comp, void *temp)
▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭
<BEGIN>
mergesort(6710024,0,vec.size)
    mid=3
    ▲   L(671,0,3)
    │       mid=1
    │       ▲   L([6],0,1) <base case, return>
    │       │   R(71,1,3)
    │       │      ┌▶mid=2
    │       │      │ L([7],1,2) <base case, return>
    │       │      │ R([1],2,3) <base case, return>
    │       ▼      └▶merge([7][1],1,2,3,comp,temp) <return>               [1,7]
    │       merge([6][1,7],0,1,3,comp,temp) <return>                    [1,6,7] 
    │   R(0024,3,7)
    │       mid=5
    │       ▲   L(00,3,5)
    │       │      ┌▶mid=4
    │       │      │ L([0],3,4) <base case, return>
    │       │      │ R([0],4,5) <base case, return>
    │       │      └▶merge([0][0],3,4,5,comp,temp) <return>               [0,0]
    │       │   R(24,5,7)
    │       │      ┌▶mid=6
    │       │      │ L([2],5,6) <base case, return>
    │       │      │ R([4],6,7) <base case, return>
    │       ▼      └▶merge([2][4],5,6,7,comp,temp) <return>               [2,4]
    ▼       merge([0,0][2,4],3,5,7,comp,temp) <return>                [0,0,2,4]
    merge([1,6,7][0,0,2,4],0,3,vec.size,comp,temp) <return>     [0,0,1,2,4,6,7]
<END>
▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭▭

